app {
  enabled-sites = [
      "avitoma"
  ]
}

kafka-streams {
  bootstrap-servers = "localhost:9092"
  bootstrap-servers = ${?KAFKA_BOOTSTRAP_SERVERS}

  app-id = "recsys-real-time-user-profile-KApp"
  app-id = ${?APP_ID}

  num-threads = "1"
  num-threads = ${?KAFKA_STREAMS_NUM_THREADS}

  properties {
    application.id = ${kafka-streams.app-id}
    bootstrap.servers = ${kafka-streams.bootstrap-servers}
    state.dir = "/opt/docker"
    retries = ${?KAFKA_STREAMS_RETRIES}
    retry.backoff.ms = ${?KAFKA_STREAMS_RETRY_BACKOFF_MS}
    session.timeout.ms = ${?KAFKA_SESSION_TIMEOUT_MS}
    max.poll.records = ${?KAFKA_MAX_POLL_RECORDS}

    request.timeout.ms = ${?KAFKA_REQUEST_TIMEOUT_MS}

    auto.offset.reset = "latest"
    auto.offset.reset = ${?KAFKA_AUTO_OFFSET_RESET}

    default.deserialization.exception.handler = "org.apache.kafka.streams.errors.LogAndContinueExceptionHandler"
    // this section might be needed once we deploy and start tuning the app

    //    max.poll.interval.ms = 300000
    //    cache.max.bytes.buffering = 1073741824 // 1Gb
    //    commit.interval.ms = 60000
    //    state.cleanup.delay.ms = 600000
  }

  collected-metrics = {
    consumer-fetch-manager-metrics = ["records-lag-max"],
    stream-metrics = ["process-rate"],
    consumer-metrics = ["connection-count"],
    producer-metrics = ["connection-count"]
  }

}

secrets {
  kafka-key = "recsys/realtime/user/profile/kafka-credentials"
  kafka-key = ${?SECRETS_KAFKA_KEY}
}

aws {
  credentials-type = "default"
  credentials-type = ${?AWS_CREDENTIALS_TYPE}

  region = "eu-west-1"
  region = ${?AWS_REGION}
}


metrics {
  datadog {
    prefix = "p10n.realtime_user_profile"
    period = "1m"
  }
}
